/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IUserClient {
    createUser(name?: string | null | undefined): Promise<UserDto>;
    getUser(userid: string | null): Promise<UserDto>;
}

export class UserClient implements IUserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:2947";
    }

    createUser(name?: string | null | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/User/Create?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    getUser(userid: string | null): Promise<UserDto> {
        let url_ = this.baseUrl + "/User/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(<any>null);
    }
}

export class UserDto implements IUserDto {
    id!: string;
    userName?: string | null;
    fullName?: string[] | null;
    address?: AddressDto | null;
    email?: string | null;
    gender!: Gender;
    dateOfBirth!: Date;
    deactivate!: boolean;
    registrationTime!: Date;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            if (Array.isArray(_data["fullName"])) {
                this.fullName = [] as any;
                for (let item of _data["fullName"])
                    this.fullName!.push(item);
            }
            else {
                this.fullName = <any>null;
            }
            this.address = _data["address"] ? AddressDto.fromJS(_data["address"]) : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : <any>null;
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>null;
            this.deactivate = _data["deactivate"] !== undefined ? _data["deactivate"] : <any>null;
            this.registrationTime = _data["registrationTime"] ? new Date(_data["registrationTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        if (Array.isArray(this.fullName)) {
            data["fullName"] = [];
            for (let item of this.fullName)
                data["fullName"].push(item);
        }
        data["address"] = this.address ? this.address.toJSON() : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["deactivate"] = this.deactivate !== undefined ? this.deactivate : <any>null;
        data["registrationTime"] = this.registrationTime ? this.registrationTime.toISOString() : <any>null;
        return data; 
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto {
    id: string;
    userName?: string | null;
    fullName?: string[] | null;
    address?: AddressDto | null;
    email?: string | null;
    gender: Gender;
    dateOfBirth: Date;
    deactivate: boolean;
    registrationTime: Date;
}

export class AddressDto implements IAddressDto {
    id!: string;
    country?: string | null;
    city?: string | null;
    zip?: string | null;
    township?: string | null;
    district?: string | null;
    village?: string | null;
    neighborhood?: string | null;
    boulevard?: string | null;
    road?: string | null;
    street?: string | null;
    section?: string | null;
    lane?: string | null;
    alley?: string | null;
    number!: number;
    floor!: number;
    room!: number;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.zip = _data["zip"] !== undefined ? _data["zip"] : <any>null;
            this.township = _data["township"] !== undefined ? _data["township"] : <any>null;
            this.district = _data["district"] !== undefined ? _data["district"] : <any>null;
            this.village = _data["village"] !== undefined ? _data["village"] : <any>null;
            this.neighborhood = _data["neighborhood"] !== undefined ? _data["neighborhood"] : <any>null;
            this.boulevard = _data["boulevard"] !== undefined ? _data["boulevard"] : <any>null;
            this.road = _data["road"] !== undefined ? _data["road"] : <any>null;
            this.street = _data["street"] !== undefined ? _data["street"] : <any>null;
            this.section = _data["section"] !== undefined ? _data["section"] : <any>null;
            this.lane = _data["lane"] !== undefined ? _data["lane"] : <any>null;
            this.alley = _data["alley"] !== undefined ? _data["alley"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.floor = _data["floor"] !== undefined ? _data["floor"] : <any>null;
            this.room = _data["room"] !== undefined ? _data["room"] : <any>null;
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["zip"] = this.zip !== undefined ? this.zip : <any>null;
        data["township"] = this.township !== undefined ? this.township : <any>null;
        data["district"] = this.district !== undefined ? this.district : <any>null;
        data["village"] = this.village !== undefined ? this.village : <any>null;
        data["neighborhood"] = this.neighborhood !== undefined ? this.neighborhood : <any>null;
        data["boulevard"] = this.boulevard !== undefined ? this.boulevard : <any>null;
        data["road"] = this.road !== undefined ? this.road : <any>null;
        data["street"] = this.street !== undefined ? this.street : <any>null;
        data["section"] = this.section !== undefined ? this.section : <any>null;
        data["lane"] = this.lane !== undefined ? this.lane : <any>null;
        data["alley"] = this.alley !== undefined ? this.alley : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["floor"] = this.floor !== undefined ? this.floor : <any>null;
        data["room"] = this.room !== undefined ? this.room : <any>null;
        return data; 
    }

    clone(): AddressDto {
        const json = this.toJSON();
        let result = new AddressDto();
        result.init(json);
        return result;
    }
}

export interface IAddressDto {
    id: string;
    country?: string | null;
    city?: string | null;
    zip?: string | null;
    township?: string | null;
    district?: string | null;
    village?: string | null;
    neighborhood?: string | null;
    boulevard?: string | null;
    road?: string | null;
    street?: string | null;
    section?: string | null;
    lane?: string | null;
    alley?: string | null;
    number: number;
    floor: number;
    room: number;
}

export enum Gender {
    Male = 0,
    Female = 1,
    Unisex = 2,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}